// screens/AddViolationScreen.js
import React, { useState } from 'react';
import { View, Text, TextInput, Button, Image, StyleSheet, Alert } from 'react-native';
import * as ImagePicker from 'expo-image-picker';
import * as Location from 'expo-location';
import { insertViolation } from '../database';

export default function AddViolationScreen({ navigation }) {
    const [description, setDescription] = useState('');
    const [category, setCategory] = useState('');
    const [imageUri, setImageUri] = useState(null);
    const [location, setLocation] = useState(null);

    const takePhoto = async () => {
        const permission = await ImagePicker.requestCameraPermissionsAsync();
        if (!permission.granted) {
            Alert.alert('–ü–æ–º–∏–ª–∫–∞', '–î–æ–∑–≤—ñ–ª –Ω–∞ –∫–∞–º–µ—Ä—É –Ω–µ –Ω–∞–¥–∞–Ω–æ');
            return;
        }

        const result = await ImagePicker.launchCameraAsync({ quality: 0.5 });
        if (!result.canceled) {
            setImageUri(result.assets[0].uri);
        }
    };

    const getLocation = async () => {
        const { status } = await Location.requestForegroundPermissionsAsync();
        if (status !== 'granted') {
            Alert.alert('–ü–æ–º–∏–ª–∫–∞', '–î–æ–∑–≤—ñ–ª –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –Ω–µ –Ω–∞–¥–∞–Ω–æ');
            return;
        }

        const loc = await Location.getCurrentPositionAsync({});
        setLocation(loc.coords);
    };

    const handleSave = async () => {
        if (
            !description.trim() ||
            !category.trim() ||
            !imageUri ||
            !location?.latitude ||
            !location?.longitude
        ) {
            Alert.alert('–ü–æ–º–∏–ª–∫–∞', '–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è —Ç–∞ –∑—Ä–æ–±—ñ—Ç—å —Ñ–æ—Ç–æ');
            return;
        }

        const date = new Date().toISOString();

        await insertViolation({
            description,
            category,
            imageUri,
            date,
            latitude: location.latitude,
            longitude: location.longitude,
            userId: 1,
        });

        Alert.alert('–£—Å–ø—ñ—à–Ω–æ', '–ü–æ—Ä—É—à–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ');

        // üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—ñ–≤
        setDescription('');
        setCategory('');
        setImageUri(null);
        setLocation(null);

        // üîô –ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞–∑–∞–¥
        navigation.goBack();
    };

    return (
        <View style={styles.container}>
            <Button title="–ó—Ä–æ–±–∏—Ç–∏ —Ñ–æ—Ç–æ" onPress={takePhoto} />
            {imageUri && <Image source={{ uri: imageUri }} style={styles.image} />}

            <TextInput
                style={styles.input}
                placeholder="–û–ø–∏—Å"
                value={description}
                onChangeText={setDescription}
            />

            <TextInput
                style={styles.input}
                placeholder="–ö–∞—Ç–µ–≥–æ—Ä—ñ—è"
                value={category}
                onChangeText={setCategory}
            />

            <Button title="–û—Ç—Ä–∏–º–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é" onPress={getLocation} />
            {location && (
                <Text>
                    üìç {location.latitude.toFixed(5)}, {location.longitude.toFixed(5)}
                </Text>
            )}

            <Button title="–ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ—Ä—É—à–µ–Ω–Ω—è" onPress={handleSave} />
        </View>
    );
}

const styles = StyleSheet.create({
    container: { flex: 1, padding: 16, gap: 10 },
    input: {
        borderWidth: 1, borderColor: '#ccc', padding: 10, borderRadius: 5,
    },
    image: {
        width: '100%', height: 200, marginVertical: 10,
    },
});
